{"version":3,"sources":["components/About.js","components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","myStyle","color","mode","backgroundColor","className","style","id","type","Alert","height","alert","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","to","title","onClick","toggleMode","width","cursor","htmlFor","TextForm","useState","text","setText","heading","onChange","e","target","value","rows","disabled","length","showAlert","document","getElementById","navigator","clipboard","writeText","newText","split","join","filter","element","defaultProps","App","setAlert","cls","console","log","body","classList","add","exact","path","message","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"4OAEe,SAASA,EAAMC,GAyB1B,IAAIC,EAAU,CACVC,MAAsB,SAAfF,EAAMG,KAAkB,QAAS,OACxCC,gBAAgC,SAAfJ,EAAMG,KAAkB,OAAQ,SAGrD,OACI,sBAAKE,UAAU,qBAAqBC,MAAOL,EAAQ,UAC/C,oBAAII,UAAU,OAAM,SAAC,aACrB,sBAAKA,UAAU,YAAYE,GAAG,mBAAkB,UAC5C,sBAAKF,UAAU,iBAAgB,UAC3B,oBAAIA,UAAU,mBAAmBE,GAAG,aAAY,SAC5C,wBAAQF,UAAU,mBAAmBC,MAAOL,EAASO,KAAK,SAAS,iBAAe,WAAW,iBAAe,eAAe,gBAAc,OAAO,gBAAc,cAAa,SAAC,wBAIhL,qBAAKD,GAAG,cAAcF,UAAU,mCAAmC,kBAAgB,aAAa,iBAAe,oBAAmB,SAC9H,sBAAKA,UAAU,iBAAiBC,MAAOL,EAAQ,UAC3C,iCAAQ,6CAAiD,qXAAkX,+BAAM,oBAAuB,uDAIpd,sBAAKI,UAAU,iBAAgB,UAC3B,oBAAIA,UAAU,mBAAmBE,GAAG,aAAY,SAC5C,wBAAQF,UAAU,6BAA6BC,MAAOL,EAASO,KAAK,SAAS,iBAAe,WAAW,iBAAe,eAAe,gBAAc,QAAQ,gBAAc,cAAa,SAAC,wBAI3L,qBAAKD,GAAG,cAAcF,UAAU,8BAA8B,kBAAgB,aAAa,iBAAe,oBAAmB,SACzH,sBAAKA,UAAU,iBAAiBC,MAAOL,EAAQ,UAC3C,iCAAQ,8CAAkD,sXAAmX,+BAAM,oBAAuB,uDAItd,sBAAKI,UAAU,iBAAgB,UAC3B,oBAAIA,UAAU,mBAAmBE,GAAG,eAAc,SAC9C,wBAAQF,UAAU,6BAA6BC,MAAOL,EAASO,KAAK,SAAS,iBAAe,WAAW,iBAAe,iBAAiB,gBAAc,QAAQ,gBAAc,gBAAe,SAAC,wBAI/L,qBAAKD,GAAG,gBAAgBF,UAAU,8BAA8B,kBAAgB,eAAe,iBAAe,oBAAmB,SAC7H,sBAAKA,UAAU,iBAAiBC,MAAOL,EAAQ,UAC3C,iCAAQ,6CAAiD,sXAAmX,+BAAM,oBAAuB,6DClEtd,SAASQ,EAAMT,GAK1B,OACI,qBAAKM,MAAO,CAACI,OAAQ,QAAQ,SACxBV,EAAMW,OACP,sBAAKN,UAAS,sBAAiBL,EAAMW,MAAMH,KAAI,gCAAgCI,KAAK,QAAO,UACvF,mCARO,SAACC,GAChB,IAAMC,EAAQD,EAAKE,cACnB,OAAOD,EAAME,OAAO,GAAGC,cAAgBH,EAAMI,MAAM,GAMlCC,CAAWnB,EAAMW,MAAMH,MAAM,QAAW,IAAER,EAAMW,MAAMS,S,WCRhE,SAASC,EAAOrB,GAC3B,OACI,qBAAKK,UAAS,yCAAoCL,EAAMG,KAAI,eAAOH,EAAMG,MAAO,SAC5E,sBAAKE,UAAU,kBAAiB,UAC5B,cAAC,IAAI,CAACA,UAAU,eAAeiB,GAAG,IAAG,SAAEtB,EAAMuB,QAC7C,wBAAQlB,UAAU,iBAAiBG,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAAmB,SAC3M,sBAAMH,UAAU,0BAEpB,sBAAKA,UAAU,2BAA2BE,GAAG,yBAAwB,UACjE,qBAAIF,UAAU,kCAAiC,UAC3C,oBAAIA,UAAU,WAAU,SACpB,cAAC,IAAI,CAACA,UAAU,kBAAkB,eAAa,OAAOiB,GAAG,IAAG,SAAC,WAEjE,oBAAIjB,UAAU,WAAU,SACpB,cAAC,IAAI,CAACA,UAAU,WAAWiB,GAAG,SAAQ,SAAC,eAG/C,sBAAKjB,UAAU,SAAQ,UACnB,qBAAKA,UAAU,yBAAyBmB,QAAS,kBAAMxB,EAAMyB,WAAW,YAAYnB,MAAO,CAACI,OAAQ,OAAQgB,MAAO,OAAQC,OAAQ,aACnI,qBAAKtB,UAAU,yBAAyBmB,QAAS,kBAAMxB,EAAMyB,WAAW,YAAYnB,MAAO,CAACI,OAAQ,OAAQgB,MAAO,OAAQC,OAAQ,aACnI,qBAAKtB,UAAU,yBAAyBmB,QAAS,kBAAMxB,EAAMyB,WAAW,YAAYnB,MAAO,CAACI,OAAQ,OAAQgB,MAAO,OAAQC,OAAQ,aACnI,qBAAKtB,UAAU,wBAAwBmB,QAAS,kBAAMxB,EAAMyB,WAAW,WAAWnB,MAAO,CAACI,OAAQ,OAAQgB,MAAO,OAAQC,OAAQ,gBAErI,sBAAKtB,UAAS,sCAAgD,UAAfL,EAAMG,KAAmB,OAAQ,SAAU,UACtF,uBAAOE,UAAU,mBAAmBmB,QAAS,kBAAMxB,EAAMyB,WAAW,OAAOjB,KAAK,WAAWD,GAAG,2BAC9F,uBAAOF,UAAU,mBAAmBuB,QAAQ,yBAAwB,SAAC,gCCzB9E,SAASC,EAAS7B,GAC7B,MAAwB8B,mBAAS,IAAG,mBAA7BC,EAAI,KAAEC,EAAO,KA0CpB,OACI,qCACA,sBAAK3B,UAAU,iBAAgB,UAC3B,oBAAIA,UAAU,OAAM,SAAEL,EAAMiC,UAC5B,qBAAK5B,UAAU,OAAM,SACjB,0BAAUA,UAAU,eAAe6B,SAhBzB,SAACC,GAEnBH,EAAQG,EAAEC,OAAOC,QAcmD9B,GAAG,QAAQ+B,KAAK,IAAID,MAAON,MAE3F,wBAAQQ,SAAwB,IAAdR,EAAKS,OAAYnC,UAAU,uBAAuBmB,QA/CtD,WAElBQ,EAAQD,EAAKd,eACbjB,EAAMyC,UAAU,wBAAyB,YA4CsD,SAAC,sBAC5F,wBAAQF,SAAwB,IAAdR,EAAKS,OAAYnC,UAAU,uBAAuBmB,QA3CrD,WAEnBQ,EAAQD,EAAKhB,eACbf,EAAMyC,UAAU,wBAAyB,YAwCuD,SAAC,kBAC7F,wBAAQF,SAAwB,IAAdR,EAAKS,OAAYnC,UAAU,uBAAuBmB,QAtCzD,WACDkB,SAASC,eAAe,SACtCC,UAAUC,UAAUC,UAAUf,EAAKM,OACnCrC,EAAMyC,UAAU,qCAAsC,YAmCsC,SAAC,cACzF,wBAAQF,SAAwB,IAAdR,EAAKS,OAAYnC,UAAU,uBAAuBmB,QAjClD,WACtB,IAAIuB,EAAUhB,EAAKiB,MAAM,QACzBhB,EAAQe,EAAQE,KAAK,MACrBjD,EAAMyC,UAAU,oCAAqC,YA8B8C,SAAC,wBAChG,wBAAQF,SAAwB,IAAdR,EAAKS,OAAYnC,UAAU,uBAAuBmB,QA3BpD,WACpBQ,EAAQ,IACRhC,EAAMyC,UAAU,4BAA6B,YAyBoD,SAAC,eAC9F,uBAAOjC,KAAK,QAAQH,UAAU,qBAAqB6B,SAjBjC,SAACC,GACvBO,SAASC,eAAe,SAASrC,MAAMJ,MAAQiC,EAAEC,OAAOC,YAoBxD,sBAAKhC,UAAU,iBAAgB,UAC3B,oBAAIC,MAAO,CAACJ,MAAO,OAAO,SAAC,sBAC3B,8BAAI6B,EAAKiB,MAAM,OAAOE,QAAO,SAACC,GAAa,OAA0B,IAAnBA,EAAQX,UAAeA,OAAO,WAAST,EAAKS,OAAO,iBACrG,8BAAI,KAAQT,EAAKiB,MAAM,KAAKE,QAAO,SAACC,GAAa,OAA0B,IAAnBA,EAAQX,UAAeA,OAAO,oBACtF,6BAAI,YACJ,4BAAIT,EAAKS,OAAO,EAAGT,EAAM,4BD3BrCV,EAAO+B,aAAe,CAClB7B,MAAO,U,WEiBI8B,MA7Cf,WACE,MAAwBvB,mBAAS,SAAQ,mBAAlC3B,EAAI,KACX,GADoB,KACM2B,mBAAS,OAAK,mBAAjCnB,EAAK,KAAE2C,EAAQ,KA6BtB,OACE,mCACE,eAAC,IAAM,WACL,cAACjC,EAAM,CAAClB,KAAMA,EAAMsB,WAlBP,SAAC8B,GAClBC,QAAQC,IAAIF,GACZb,SAASgB,KAAKC,UAAUC,IAAI,MAAD,OAAOL,OAiB9B,cAAC9C,EAAK,CAACE,MAAOA,IACd,eAAC,IAAM,WACL,cAAC,IAAK,CAACkD,OAAK,EAACC,KAAK,IAAIX,QAAS,cAACtB,EAAQ,CAACY,UAjC/B,SAACsB,EAASvD,GAC1B8C,EAAS,CACPlC,IAAK2C,EACLvD,KAAMA,IAGRwD,YAAW,WACTV,EAAS,QACR,MAyBkErB,QAAQ,gCACvE,cAAC,IAAK,CAAC4B,OAAK,EAACC,KAAK,SAASX,QAAS,cAACpD,EAAK,CAACI,KAAMA,eCvC5C8D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,MAENlC,SAASC,eAAe,SAM1BsB,M","file":"static/js/main.45a1c06c.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nexport default function About(props) {\n    // const [myStyle, setMyStyle] = useState({\n    //     color: \"black\",\n    //     backgroundColor: \"white\" \n    // });\n\n    // const [btnText, setBtnText] = useState('Enable Dark Mode')\n\n    // const toggleStyle = () => {\n    //    if(myStyle.backgroundColor === 'white'){\n    //     setMyStyle({\n    //         color: \"white\",\n    //         backgroundColor: \"grey\" \n    //        });\n    //        setBtnText(\"Enable Light Mode\");\n    //     }else{\n    //         setMyStyle({\n    //             color: \"black\",\n    //             backgroundColor: \"white\"\n    //         });\n    //         setBtnText(\"Enable Dark Mode\");\n    //    }\n    // }\n\n\n    let myStyle = {\n        color: props.mode === 'dark' ? 'white': 'grey',\n        backgroundColor: props.mode === 'dark' ? 'grey': 'white'\n    }\n\n    return (\n        <div className='container my-5 p-2' style={myStyle}>\n            <h2 className='my-3'>About Us</h2>\n            <div className=\"accordion\" id=\"accordionExample\">\n                <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\n                        <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n                            Accordion Item #1\n                        </button>\n                    </h2>\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\n                        <div className=\"accordion-body\" style={myStyle}>\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                        </div>\n                    </div>\n                </div>\n                <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\n                            Accordion Item #2\n                        </button>\n                    </h2>\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\n                        <div className=\"accordion-body\" style={myStyle}>\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                        </div>\n                    </div>\n                </div>\n                <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\n                            Accordion Item #3\n                        </button>\n                    </h2>\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\n                        <div className=\"accordion-body\" style={myStyle}>\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                        </div>\n                    </div>\n                </div>\n            </div>\n            {/* <div className=\"container my-4\">\n                <button onClick={toggleStyle} className='btn btn-primary'>{btnText}</button>\n            </div> */}\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function Alert(props) {\n    const capitalize = (word)=>{\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n    return (\n        <div style={{height: '50px'}}>\n            {props.alert &&\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n                <strong>{capitalize(props.alert.type)}! </strong> {props.alert.msg}\n            </div>}\n        </div>\n    )\n}\n","import PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n\nexport default function Navbar(props) {\n    return (\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n            <div className=\"container-fluid\">\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/about\">About</Link>\n                        </li>\n                    </ul>\n                    <div className=\"d-flex\">\n                        <div className=\"bg-primary rounded m-2\" onClick={() => props.toggleMode('primary')} style={{height: '30px', width: '30px', cursor: 'pointer'}}></div>\n                        <div className=\"bg-success rounded m-2\" onClick={() => props.toggleMode('success')} style={{height: '30px', width: '30px', cursor: 'pointer'}}></div>\n                        <div className=\"bg-warning rounded m-2\" onClick={() => props.toggleMode('warning')} style={{height: '30px', width: '30px', cursor: 'pointer'}}></div>\n                        <div className=\"bg-danger rounded m-2\" onClick={() => props.toggleMode('danger')} style={{height: '30px', width: '30px', cursor: 'pointer'}}></div>\n                    </div>\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark': 'light'}`}>\n                        <input className=\"form-check-input\" onClick={() => props.toggleMode(null)} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\n                    </div>\n                </div>\n            </div>\n        </nav>\n    )\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string.isRequired,\n}\n\nNavbar.defaultProps = {\n    title: \"Navbar\",\n}\n\n","import React, {useState} from 'react'\n\n\nexport default function TextForm(props) {\n    const [text, setText] = useState('');\n\n    const handleUpClick = () =>{\n        // console.log(\"UpperCase was clicked\");\n        setText(text.toUpperCase())\n        props.showAlert(\"Coverted to uppercase\", 'success');\n    }\n    const handleLowClick = () =>{\n        // console.log(\"UpperCase was clicked\");\n        setText(text.toLowerCase())\n        props.showAlert(\"Coverted to lowercase\", 'success');\n    }\n\n    const handleCopy = ()=>{\n        let textBox = document.getElementById('myBox')\n        navigator.clipboard.writeText(text.value);\n        props.showAlert(\"Text has been successfully copied.\", 'success');\n    }\n\n    const handleExtraSpaces = () =>{\n        let newText = text.split(/[ ]+/);\n        setText(newText.join(\" \"));\n        props.showAlert(\"Extra Spaces removed successfully\", 'success');\n\n    }\n\n    const handleClearText = () => {\n        setText(\"\");\n        props.showAlert(\"Text successfully Removed\", 'success');\n    }\n\n    const handlOnChange = (e) =>{\n        // console.log(\"On change\");\n        setText(e.target.value)\n\n    }\n\n    const handleChangeColor = (e)=>{\n        document.getElementById('myBox').style.color = e.target.value;\n    }\n\n    \n    return (\n        <>\n        <div className='container my-3'>\n            <h2 className='my-3'>{props.heading}</h2>\n            <div className=\"mb-3\">\n                <textarea className=\"form-control\" onChange={handlOnChange} id=\"myBox\" rows=\"5\" value={text}></textarea>\n            </div>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Text to uppercase</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1\" onClick={handleLowClick}>Text to lower</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1\" onClick={handleClearText}>Clear Text</button>\n            <input type=\"color\" className=\"form-control-color\" onChange={handleChangeColor} />\n            \n\n        </div>\n        <div className=\"container my-2\">\n            <h3 style={{color: \"red\"}}>Your text summary</h3>\n            <p>{text.split(/\\s+/).filter((element) => {return element.length !== 0}).length} words, {text.length} characters</p>\n            <p>{0.008 * text.split(\" \").filter((element) => {return element.length !== 0}).length} Minutes read.</p>\n            <h4>Preview</h4>\n            <p>{text.length>0? text: 'Noting to preview'}</p>\n        </div>\n        </>\n    )\n}\n\n\n\n\n","import React, { useState } from 'react';\nimport './App.css';\nimport About from './components/About';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light') //check whether dark mode is enable or not.\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    setTimeout(() => {\n      setAlert(null)\n    }, 2000);\n\n  }\n\n  const toggleMode = (cls) => {\n    console.log(cls);\n    document.body.classList.add(`bg-${cls}`)\n    // if (mode === 'light') {\n    //   setMode('dark');\n    //   document.body.classList.add('bg-secondary');\n    //   showAlert(\"Dark mode has been enabled\", 'success');\n    //   document.title = 'Textutils - Dark Mode';\n    \n    // } else {\n    //   setMode('light');\n    //   document.body.classList.remove('bg-secondary');\n    //   showAlert(\"light mode has been enabled\", 'success');\n    // }\n  }\n  return (\n    <>\n      <Router>\n        <Navbar mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <Routes>\n          <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" />} />\n          <Route exact path=\"/about\" element={<About mode={mode} />} />\n        </Routes>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}